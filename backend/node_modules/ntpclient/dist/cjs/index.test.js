var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable no-magic-numbers */
import { assert, expect, describe, test, beforeEach, vi, afterEach } from 'vitest';
import { NTPClient } from './index.js';
const SECOND_IN_MILLIS = 1000;
const replyTimeout = 10 * SECOND_IN_MILLIS;
describe('NTP', () => {
    beforeEach(() => {
        vi.mock('dgram', () => __awaiter(void 0, void 0, void 0, function* () {
            const actual = (yield vi.importActual('dgram'));
            const socket = actual.createSocket('udp4');
            return Object.assign(Object.assign({}, actual), { send: () => {
                    socket.emit('message', Buffer.from([
                        0x1c, 0x02, 0x03, 0xe8, 0x00, 0x00, 0x02, 0x1a, 0x00, 0x00, 0x05, 0x12, 0xc0, 0x35, 0x67, 0x6c, 0xe9,
                        0x03, 0x76, 0xff, 0xff, 0x97, 0x0f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x03,
                        0x78, 0x0f, 0xe9, 0xd6, 0x4e, 0x10, 0xe9, 0x03, 0x78, 0x0f, 0xea, 0x03, 0x93, 0xf5,
                    ]));
                } });
        }));
    });
    afterEach(() => {
        vi.resetAllMocks();
    });
    test('returns the current time', () => __awaiter(void 0, void 0, void 0, function* () {
        const ntpClient = new NTPClient({
            replyTimeout,
        });
        const data = yield ntpClient.getNetworkTime();
        expect(data).toEqual(expect.any(Date));
    }), replyTimeout);
    test('works with another NTP server', () => __awaiter(void 0, void 0, void 0, function* () {
        const ntpClient = new NTPClient({
            replyTimeout,
            server: '0.pool.ntp.org',
        });
        const data = yield ntpClient.getNetworkTime();
        expect(data).toEqual(expect.any(Date));
    }), replyTimeout);
    test("doesn't work with an invalid NTP server", () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const ntpClient = new NTPClient({
                replyTimeout: SECOND_IN_MILLIS,
                server: 'google.com',
            });
            yield ntpClient.getNetworkTime();
            assert.fail();
        }
        catch (error) {
            expect(error.message).toContain('Timeout');
        }
    }));
});
